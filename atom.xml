<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>YeJF的篝火</title>
  
  <subtitle>回血、存档、再出发</subtitle>
  <link href="http://xr08255920.github.io/atom.xml" rel="self"/>
  
  <link href="http://xr08255920.github.io/"/>
  <updated>2021-11-24T13:02:58.569Z</updated>
  <id>http://xr08255920.github.io/</id>
  
  <author>
    <name>yejf</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>c++</title>
    <link href="http://xr08255920.github.io/2021/11/18/c/"/>
    <id>http://xr08255920.github.io/2021/11/18/c/</id>
    <published>2021-11-18T14:34:58.000Z</published>
    <updated>2021-11-24T13:02:58.569Z</updated>
    
    <content type="html"><![CDATA[<h1 id="学习资料"><a href="#学习资料" class="headerlink" title="学习资料"></a>学习资料</h1><h2 id="书籍"><a href="#书籍" class="headerlink" title="书籍"></a>书籍</h2><ul><li>&lt;c++ primer plus&gt;</li></ul><h2 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h2><p>【零基础学C++】老九零基础学编程系列之C++<br><a href="https://www.bilibili.com/video/BV12x411D7xr?p=102">https://www.bilibili.com/video/BV12x411D7xr?p=102</a></p><h1 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h1><h2 id="windows环境"><a href="#windows环境" class="headerlink" title="windows环境"></a>windows环境</h2><h3 id="hello-world"><a href="#hello-world" class="headerlink" title="hello world"></a>hello world</h3><ol><li>安装cygwin</li><li>cygwin安装g++</li><li>编写hello world.cpp文件</li><li>使用g++编译第一个 hello world 文件</li></ol><h2 id="关键知识点实践"><a href="#关键知识点实践" class="headerlink" title="关键知识点实践"></a>关键知识点实践</h2><ul><li>编写 sizeof(struct) ，观察struct 的内存占用<ul><li>sizeof(数组) ，输出的是数组占用内存</li><li>输出数组长度</li></ul></li><li>使用sort(arr)排序，需要引入 &lt;algroithm&gt; 包</li><li>指针需要习惯赋初值：0</li><li>指针动态分配内存：<code>int* num = new int[5]</code><ul><li>记得手动释放：<code>delete[] num</code></li></ul></li><li>函数传递指针、引用作为参数</li><li>函数传递函数指针作为参数</li><li>数组作为函数入参，内容容易被修改，若不能被改，入参定义前可加<code>const</code></li></ul><h3 id="自定义函数"><a href="#自定义函数" class="headerlink" title="自定义函数"></a>自定义函数</h3><ol><li>函数原型（可省略参数名，调用前必须先写原型</li><li>函数定义（逻辑实现</li><li>返回值类型不能是数组，参数可以</li></ol><h3 id="函数指针"><a href="#函数指针" class="headerlink" title="函数指针"></a>函数指针</h3><p>声明:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//函数原型</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">sum</span><span class="params">(<span class="keyword">double</span>,<span class="keyword">double</span>)</span></span>;</span><br><span class="line"><span class="comment">//函数指针类型声明</span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">double</span> <span class="params">(*ptrSum)</span><span class="params">(<span class="keyword">double</span>,<span class="keyword">double</span>)</span></span>; <span class="comment">//此时ptrSum表示类型</span></span><br><span class="line"><span class="comment">//函数指针变量声明</span></span><br><span class="line"><span class="built_in"><span class="keyword">double</span></span> (*ptrSum)(<span class="keyword">double</span>,<span class="keyword">double</span>); <span class="comment">//此时ptrSum表示变量名</span></span><br><span class="line"><span class="comment">//函数指针赋值</span></span><br><span class="line">ptrSum = sum;</span><br><span class="line"><span class="comment">//函数原型中，入参类型声明为：（函数指针类型，数1，数2)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_result</span><span class="params">(<span class="keyword">double</span> (*)(<span class="keyword">double</span>,<span class="keyword">double</span>),<span class="keyword">double</span>,<span class="keyword">double</span>)</span></span>;</span><br></pre></td></tr></table></figure><h2 id="关键概念理清"><a href="#关键概念理清" class="headerlink" title="关键概念理清"></a>关键概念理清</h2><ul><li># 开头的<strong>都</strong>是<strong>预处理</strong>指令，就是编译之前编译器的预操作</li><li>运算符重载，应用：迭代器 iterator++、指针++(与前面一回事)</li><li>数组名就是数组的首<strong>地址</strong>，所以定义指针时，数组名前不用加&amp;<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> score[] &#123;<span class="number">1.1</span>, <span class="number">1.2</span>, <span class="number">22.3</span>&#125;;</span><br><span class="line"><span class="keyword">double</span> * ptr_score = score;</span><br><span class="line"><span class="comment">//typeof score = double[]</span></span><br><span class="line"><span class="comment">//typeof ptr_score = 指针&lt;T&gt;</span></span><br></pre></td></tr></table></figure></li><li>指针类型（地址）++，只会指向新地址，+的是类型长度</li><li>普通变量赋值：开辟新区域，变量重新指向，指针赋值：在指针区域直接赋值，引用变量的赋值：引用区域直接赋值（本质是指针）</li><li>endl 和 \n 的区别：endl带flush</li><li>动态数组vector，使用：<ul><li>可见iterator是一个数组指针，arr.begin()是数组头地址，arr.end()同理<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="keyword">int</span>&gt; arr &#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt;::iterator it;</span><br><span class="line">it = arr.<span class="built_in">begin</span>();</span><br><span class="line"><span class="keyword">while</span>(it != arr.<span class="built_in">end</span>())&#123;</span><br><span class="line">it++;</span><br><span class="line">cout &lt;&lt; *it &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li>void* 指针，可以存任意对象地址，但无法赋值，只能作对比用</li><li>指针变量(<em>p++)的优先级是(</em>(p++))，先运算再寻址</li></ul><h2 id="与java的差异点"><a href="#与java的差异点" class="headerlink" title="与java的差异点"></a>与java的差异点</h2><ul><li>数组初始化不需要加 = 号<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> array[] &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;;</span><br></pre></td></tr></table></figure></li></ul><h2 id="概念图"><a href="#概念图" class="headerlink" title="概念图"></a>概念图</h2><h3 id="编译过程"><a href="#编译过程" class="headerlink" title="编译过程"></a>编译过程</h3><p>![[img/Pasted image 20201114230333.png]]</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;学习资料&quot;&gt;&lt;a href=&quot;#学习资料&quot; class=&quot;headerlink&quot; title=&quot;学习资料&quot;&gt;&lt;/a&gt;学习资料&lt;/h1&gt;&lt;h2 id=&quot;书籍&quot;&gt;&lt;a href=&quot;#书籍&quot; class=&quot;headerlink&quot; title=&quot;书籍&quot;&gt;&lt;/a&gt;书籍&lt;/h</summary>
      
    
    
    
    <category term="c++ 系列" scheme="http://xr08255920.github.io/categories/c-%E7%B3%BB%E5%88%97/"/>
    
    
    <category term="c++" scheme="http://xr08255920.github.io/tags/c/"/>
    
  </entry>
  
</feed>
